<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
      <set-variable name="contentTypeHeader" value="@{
            string[] value;
            if (context.Request.Headers.TryGetValue("content-type", out value))
            {
                if (value != null && value.Length > 0)
                {
                    return value[0].Replace("\"","");
                }
            }
            return String.Empty;

      }" />
      <set-header name="Content-Type" exists-action="override">
        <value>"@((string)context.Variables["contentTypeHeader"])"</value>
      </set-header>
      <set-variable name="contentType" value="@{
            if(context.Api.Name.Contains("SOAP")){
                return "text/xml";
            }

            return "application/json";
        }"/>
        <set-variable name="jsonErrorFormat" value="@{
            return "{{\"error\": {{\"code\": \"{0}\", \"message\": \"{1}\"}}}}";
        }"/>
        <set-variable name="xmlErrorFormat" value="@{
            return "<s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'><s:Body><s:Fault><faultcode>s:Client</faultcode><faultstring xml:lang='en-IN'>{0}</faultstring></s:Fault></s:Body></s:Envelope>";
        }"/>
        <!-- Validate Authorization header -->
          <!--set-variable name="basicAuth" value="@{
            // validate Authorization header
            string basicAuth;
            basicAuth = context.Request.Headers.GetValueOrDefault("Authorization", "").Split(' ')?.Last() ?? "";
            
            // validate basicAuth base64 string
            if(!string.IsNullOrEmpty(basicAuth))
            {
                try
                {
                    string userId = context.Request.Headers.GetValueOrDefault("Authorization").AsBasic().UserId;
                    string password = context.Request.Headers.GetValueOrDefault("Authorization").AsBasic().Password;
                }
                catch
                {
                    // set basicAuth as empty string when no valid userId and password info retrieved from base64 encoded string
                    basicAuth = string.Empty; 
                }
            }

            return basicAuth;
        }" -->
          <!--choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Variables["basicAuth"]))">
                <return-response response-variable-name="Forbidden">
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Basic realm="KPN B2B System"</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                      <value>@((string)context.Variables["contentType"])</value>
                    </set-header>
                    {{response-!-headers}}
                    <set-body>@{
                          string code = "AuthenticationFailure";
                          string message = "Authorization header has no valid token provided";
                          string formattedBody = string.Empty;
                          if((string)context.Variables["contentType"] == "application/json"){
                              formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                          }
                          else{
                              formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                          }
                          return formattedBody;
                      }</set-body>
                </return-response>
            </when>
        </choose-->
          <!-- 2020-03-09 Validation of filled username parameter -->
          <choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Request.Url.Query.GetValueOrDefault("username", "")))">
                <return-response response-variable-name="Forbidden">
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Basic realm="KPN B2B System"</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                      <value>@((string)context.Variables["contentType"])</value>
                    </set-header>
                    {{response-headers}}
                    <set-body>@{
                          string code = "AuthenticationFailure";
                          string message = "User query-parameter is not provided";
                          string formattedBody = string.Empty;
                          if((string)context.Variables["contentType"] == "application/json"){
                              formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                          }
                          else{
                              formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                          }
                          return formattedBody;
                      }</set-body>
                </return-response>
            </when>
            <!-- 2020-03-09 Validation of filled password parameter -->
            <when condition="@(string.IsNullOrEmpty((string)context.Request.Url.Query.GetValueOrDefault("password", "")))">
              <return-response response-variable-name="Forbidden">
                <set-status code="401" reason="Unauthorized" />
                <set-header name="WWW-Authenticate" exists-action="override">
                  <value>Basic realm="KPN B2B System"</value>
                </set-header>
                <set-header name="Content-Type" exists-action="override">
                  <value>@((string)context.Variables["contentType"])</value>
                </set-header>
                {{response-headers}}
                <set-body>
                  @{
                  string code = "AuthenticationFailure";
                  string message = "Password query-parameter is not provided";
                  string formattedBody = string.Empty;
                  if((string)context.Variables["contentType"] == "application/json"){
                  formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                  }
                  else{
                  formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                  }
                  return formattedBody;
                  }
                </set-body>
              </return-response>
            </when>
        </choose>
        <!-- get client secret and convert to url encoded string -->
        <set-variable name="clientSecret" value="@{
            string password = "{{BasicAuth_ClientSecret}}";

            // create dictonary with special chars which need to be URL encoded
            Dictionary<char, string> keyValuePairs = new Dictionary<char, string>();
            keyValuePairs.Add(' ', "+");
            keyValuePairs.Add('#', "%23");
            keyValuePairs.Add('$', "%24");
            keyValuePairs.Add('%', "%25");
            keyValuePairs.Add('&', "%26");
            keyValuePairs.Add('\'', "%27");

            keyValuePairs.Add('+', "%2B");
            keyValuePairs.Add(',', "%2c");
            keyValuePairs.Add('/', "%2f");
            keyValuePairs.Add(':', "%3a");
            keyValuePairs.Add(';', "%3b");
            keyValuePairs.Add('<', "%3c");
            keyValuePairs.Add('=', "%3D");
            keyValuePairs.Add('>', "%3e");
            keyValuePairs.Add('?', "%3f");
            keyValuePairs.Add('@', "%40");
            keyValuePairs.Add('[', "%5b");
            keyValuePairs.Add('\\', "%5c");
            keyValuePairs.Add(']', "%5d");
            keyValuePairs.Add('^', "%5e");
            keyValuePairs.Add('`', "%60");
            keyValuePairs.Add('{', "%7b");
            keyValuePairs.Add('|', "%7c");
            keyValuePairs.Add('}', "%7d");
            keyValuePairs.Add('~', "%7e");

            string encodedPassword = "";
            foreach(char c in password)
            {
              if(keyValuePairs.ContainsKey(c))
              {
                // replace special chars with URL encoding
                encodedPassword += keyValuePairs[c];
              }
              else
              {
                encodedPassword += c;
              }
            }
            
            return encodedPassword;
          }" 
        />
        <!-- request bearer token from AAD authorization server -->
        <send-request ignore-error="false" timeout="20" response-variable-name="bearerToken" mode="new">
            <set-url>{{BasicAuth_AuthorizationServer}}</set-url>
            <set-method>POST</set-method>
            <set-header name="Content-Type" exists-action="override">
                <value>application/x-www-form-urlencoded</value>
            </set-header>
            <set-body>@($"grant_type=client_credentials&client_id={{BasicAuth_ClientId}}&client_secret={context.Variables["clientSecret"]}&resource={{BasicAuth_ResourceId}}")</set-body>
        </send-request>
        <!-- validate token -->
        <!-- read response token -->
        <set-variable name="bearerTokenReq" value="@((String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])" />
        <choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Variables["bearerTokenReq"]))">
                <return-response response-variable-name="Unauthorized">
                    <set-status code="401" reason="Unauthorized" /> 
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Basic realm="KPN B2B System"</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                      <value>@((string)context.Variables["contentType"])</value>
                    </set-header>
                    <set-body>@{
                          string code = "AuthenticationFailure";
                          string message = "Provided username and password combination is not valid in KPN Active Directory (from policy)";
                          string formattedBody = string.Empty;
                          if((string)context.Variables["contentType"] == "application/json"){
                              formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                          }
                          else{
                              formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                          }
                          return formattedBody;
                    }</set-body>
                </return-response>
            </when>
        </choose>

        <!-- BEGIN UNNEEDED CODE BUT HELPFUL IN DEBUGGING (REPLACED WITH Uri.UnescapeDataString() FUNCTION) -->
        <!-- convert query-parameter password (url encoded string) to original password (to be validated against AAD)-->
        <!--set-variable name="paramAuthDecodedSecret" value="@{
                string encodedpassword = ((string)context.Request.Url.Query.GetValueOrDefault("password", ""));
                string decodedParamPassword = encodedpassword;
                //decodedParamPassword = decodedParamPassword.Replace("%2f", "/");
                //decodedParamPassword = decodedParamPassword.Replace("%2F", "/");
                decodedParamPassword = Uri.UnescapeDataString(decodedParamPassword);
                return decodedParamPassword;
            }"
        />
        <return-response response-variable-name="Unauthorized">
            <set-status code="401" reason="Unauthorized" />
            <set-header name="WWW-Authenticate" exists-action="override">
                <value>Basic realm="KPN B2B System"</value>
            </set-header>
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                    string code = "AuthenticationFailure";
                    string message = "Problem with password (decoded: " + (string)context.Variables["paramAuthDecodedSecret"] + ")";
                    string formattedBody = string.Empty;
                    formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                    return formattedBody;
                }</set-body>
        </return-response-->
        <!-- END UNNEEDED CODE BUT HELPFUL IN DEBUGGING (REPLACED WITH Uri.UnescapeDataString() FUNCTION) -->

        <!-- retrieve client authorization for requested api -->
        <send-request ignore-error="false" timeout="20" response-variable-name="functionAppReq" mode="new">
          <set-url>{{BasicAuth_FunctionAppUrl}}</set-url>
          <set-method>POST</set-method>
          <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
          </set-header>
          <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (string)context.Variables["bearerTokenReq"])</value>
          </set-header>
          <set-header name="RequestAuthorization" exists-action="override">
            <!-- NOT NEEDED ANYMORE - THIS WAS BASIC AUTH CODE -->
            <!--value>@(context.Request.Headers.GetValueOrDefault("Authorization", ""))</value-->
            <!-- NOT NEEDED ANYMORE - THIS WAS RELATED TO DISABLED MANUAL ATTEMPT FOR URLDECODE -->
            <!--value>@("Basic " + Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(string.Format("{0}:{1}", context.Request.Url.Query.GetValueOrDefault("username", ""), context.Variables["paramAuthDecodedSecret"]))))</value-->
            <!-- NEW: This is the better way to consume the same function, passing username+password-parameters (with password urldecoded!) as base64-encoded Authorization header
                          Format: "Basic "+<base64-encoded '<user>:<password>'> -->
            <value>@("Basic " + Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(string.Format("{0}:{1}", context.Request.Url.Query.GetValueOrDefault("username", ""), Uri.UnescapeDataString(context.Request.Url.Query.GetValueOrDefault("password", ""))))))</value>
          </set-header>
          <set-header name="RequestApi" exists-action="override">
            <value>@(context.Api.Name)</value>
          </set-header>
          <set-header name="RequestUri" exists-action="override">
            <value>@((string)context.Api.ServiceUrl.ToString())</value>
          </set-header>
        </send-request>
        <!-- read response status code -->
        <set-variable name="functionAppReqStatus" value="@((string)((IResponse)context.Variables["functionAppReq"]).StatusCode.ToString())" />
        <choose>
            <!-- Unauthorized -->
              <when condition="@((string)context.Variables["functionAppReqStatus"] == "401")">
                <return-response response-variable-name="Unauthorized">
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Basic realm="KPN B2B System"</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                      <value>@((string)context.Variables["contentType"])</value>
                    </set-header>
                    {{response-headers}}
                    <set-body>@{
                          string code = "AuthenticationFailure";
                          string message = "Function access failure";
                          string formattedBody = string.Empty;
                          if((string)context.Variables["contentType"] == "application/json"){
                              formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                          }
                          else{
                              formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                          }
                          return formattedBody;
                      }</set-body>
                </return-response>
            </when>
            <when condition="@((string)context.Variables["functionAppReqStatus"] == "422")">
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Basic realm="KPN B2B System"</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                      <value>@((string)context.Variables["contentType"])</value>
                    </set-header>
                    {{response-headers}}
                    <set-body>@{
                          string code = "AuthorizationFailureParamAuth";
                          string message = (string)((IResponse)context.Variables["functionAppReq"]).Body.As<JObject>()["error"]["message"];
                          string formattedBody = string.Empty;
                          if((string)context.Variables["contentType"] == "application/json"){
                              formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                          }
                          else{
                              formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                          }
                          return formattedBody;
                    }</set-body>
                </return-response>
            </when>
            <when condition="@((string)context.Variables["functionAppReqStatus"] == "500")">
                <return-response>
                    <set-status code="500" reason="Server Error" />
                    <set-header name="Content-Type" exists-action="override">
                      <value>@((string)context.Variables["contentType"])</value>
                    </set-header>
                    {{response-headers}}
                    <set-body>@{
                          string code = "ServerError";
                          string message = "Internal server error occurred while processing your request.";
                          string formattedBody = string.Empty;
                          if((string)context.Variables["contentType"] == "application/json"){
                              formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
                          }
                          else{
                              formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
                          }
                          return formattedBody;
                    }</set-body>
                </return-response>
            </when>
            <when condition="@((string)context.Variables["functionAppReqStatus"] == "200")">
                <set-variable name="username" value="@((string)((IResponse)context.Variables["functionAppReq"]).Body.As<JObject>()["userName"].ToString())" />
            </when>
            <when condition="@((string)context.Variables["functionAppReqStatus"] != "200" && (string)context.Variables["functionAppReqStatus"] != "401" && (string)context.Variables["functionAppReqStatus"] != "422" && (string)context.Variables["functionAppReqStatus"] != "500")">
              <return-response response-variable-name="functionAppReq">
                {{response-headers}}
              </return-response>
            </when>
        </choose>
        <!-- Remove Authorization header to authenticate Logic App -->
        <set-header name="Authorization" exists-action="delete" />
        <set-header name="username" exists-action="override">
          <value>@((string)context.Variables["username"])</value>
        </set-header>
        <set-header name="api" exists-action="override">
            <value>@((string)context.Api.Name)</value>
        </set-header>
        <set-header name="Content-Type" exists-action="override">
          <value>@((string)context.Variables["contentTypeHeader"])</value>
        </set-header>
        <set-header name="apiOperationMethod" exists-action="override">
            <value>@((string)context.Operation.Method)</value>
        </set-header>
        <set-header name="apiOperationName" exists-action="override">
            <value>@((string)context.Operation.Name)</value>
        </set-header>
              
        <set-query-parameter name="password" exists-action="override">
            <value>*sanitized by policy*</value>
        </set-query-parameter>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
      {{response-headers}}
      <base />
    </outbound>
    <on-error>
        <base />
              <set-variable name="contentType" value="@{
            if(context.Api.Name.Contains("SOAP")){
                return "text/xml";
            }
            return "application/json";
            }" />
        <set-variable name="jsonErrorFormat" value="@{
            return "{{\"error\": {{\"code\": \"{0}\", \"message\": \"{1}\"}}}}";
            }" />
        <set-variable name="xmlErrorFormat" value="@{
            return "<s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'><s:Body><s:Fault><faultcode>s:Client</faultcode><faultstring xml:lang='en-IN'>{0}</faultstring></s:Fault></s:Body></s:Envelope>";
            }" />
        <return-response>
          <set-status code="@(context.Response.StatusCode)" reason="@(context.LastError.Reason)" />
          <set-header name="ErrorSource" exists-action="override">
              <value>@(context.LastError.Source)</value>
          </set-header>
          <set-header name="ErrorScope" exists-action="override">
              <value>@(context.LastError.Scope)</value>
          </set-header>
          <set-header name="ErrorSection" exists-action="override">
              <value>@(context.LastError.Section)</value>
          </set-header>
          <set-header name="ErrorPath" exists-action="override">
              <value>@(context.LastError.Path)</value>
          </set-header>
          <set-header name="Content-Type" exists-action="override">
              <value>@((string)context.Variables["contentType"])</value>
          </set-header>
          {{response-headers}}
          <set-body>@{
              // send response with last error message
              string code = "APIManagementError";
              string message = context.LastError.Message;
              string formattedBody = string.Empty;
              if((string)context.Variables["contentType"] == "application/json"){
                  formattedBody = string.Format((string)context.Variables["jsonErrorFormat"], code, message);
              }
              else{
                  formattedBody = string.Format((string)context.Variables["xmlErrorFormat"], message);
              }
              return formattedBody;
          }</set-body>
        </return-response>
    </on-error>
</policies>