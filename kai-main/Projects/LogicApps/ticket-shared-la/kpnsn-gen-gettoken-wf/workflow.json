{
    "wfparameters": {
        "logicappName": {
            "type": "String",
            "value": "{{env}}-ticket-shared-la"
        },
        "resourceGroup": {
            "type": "String",
            "value": "{{env}}-ticket-rg"
        },
        "environment": {
            "type": "String",
            "value": "{{env}}"
        }
    },
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "CreateAlert": {
                "actions": {
                    "KaiEvent": {
                        "inputs": {
                            "body": {
                                "callbackurl": "@{concat('https://portal.azure.com/#view/Microsoft_Azure_EMA/DesignerEditor.ReactView/id/%2Fsubscriptions%2F', parameters('subscriptionId'),'%2FresourceGroups%2F{{resourceGroup}}%2Fproviders%2FMicrosoft.Web%2Fsites%2F{{logicappName}}%2Fworkflows%2F',workflow()?['name'],'/location/West%20Europe/isReadOnly/true/isMonitoringView/true/runId/',workflow()?['run']?['name'])}",
                                "errordescription": "Action @{outputs('ScopeFilterFailedAction')?['body']?[0]?['name']} failed\nStatus Code:  @{outputs('ScopeFilterFailedAction')?['body']?[0]?['outputs']?['statusCode']}\nDescription:  @{outputs('ScopeFilterFailedAction')?['body']?[0]?['outputs']?['body']?['message']}\n@{outputs('ScopeFilterFailedAction')?['body']?[0]?['error']?['message']}",
                                "errortype": "Transformation Failure",
                                "logicapp": "{{logicappName}}",
                                "message_key": "@{triggerBody()['source']}:@{triggerBody()['destination']}:ticket:gentoken",
                                "resourcegroup": "{{resourceGroup}}",
                                "runID": "@{workflow()['run']['name']}",
                                "severity": "2",
                                "source": "@{triggerBody()['source']}",
                                "workflow": "@{workflow()['name']}"
                            },
                            "host": {
                                "workflow": {
                                    "id": "errorlog-wf"
                                }
                            },
                            "retryPolicy": {
                                "type": "none"
                            }
                        },
                        "type": "Workflow"
                    },
                    "ScopeFailureResponse": {
                        "inputs": {
                            "body": {
                                "error": {
                                    "code": "@if(equals(triggerBody()?['Source'],'KPN-SNGR'),'TransformationFailure','TechnicalEndpointFailure')",
                                    "message": "A transformation error occurred, the message has not been sent to the destination."
                                }
                            },
                            "statusCode": "@if(equals(triggerBody()?['Source'],'KPN-SNGR'),418,500)"
                        },
                        "kind": "Http",
                        "runAfter": {
                            "KaiEvent": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Response"
                    }
                },
                "else": {
                    "actions": {
                        "ScopeFailureResponse1": {
                            "inputs": {
                                "body": {
                                    "error": {
                                        "code": "TechnicalEndpointFailure",
                                        "message": "An error occurred please try again later, the message has not been sent to the destination.\nApp: {{logicappName}}\nWorkflow: @{workflow()?['name']}\nRunID: @{workflow()?['run']?['name']}"
                                    }
                                },
                                "statusCode": 500
                            },
                            "kind": "Http",
                            "type": "Response"
                        }
                    }
                },
                "expression": {
                    "or": [
                        {
                            "equals": [
                                "@body('ScopeFilterFailedAction')?[0]?['name']",
                                "Transform"
                            ]
                        },
                        {
                            "equals": [
                                "@body('ScopeFilterFailedAction')?[0]?['name']",
                                "ResponseData"
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "ScopeFilterFailedAction": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "EndRunKaiEvent": {
                "inputs": {
                    "runStatus": "Succeeded"
                },
                "runAfter": {
                    "CreateAlert": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Terminate"
            },
            "Scope": {
                "actions": {
                    "CheckTokenStillValid": {
                        "actions": {},
                        "else": {
                            "actions": {
                                "CheckForSpecialSecret": {
                                    "actions": {
                                        "GetSpecialSecret": {
                                            "inputs": {
                                                "parameters": {
                                                    "secretName": "@body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]?['KeyvaultSpecEntry']"
                                                },
                                                "serviceProviderConfiguration": {
                                                    "connectionName": "keyVault",
                                                    "operationId": "getSecret",
                                                    "serviceProviderId": "/serviceProviders/keyVault"
                                                }
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                  "properties": [
                                                    "outputs"
                                                  ]
                                                }
                                              },
                                            "type": "ServiceProvider"
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]?['KeyvaultSpecEntry']",
                                                        "@null"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "GetSecret": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "GetNewToken": {
                                    "inputs": {
                                        "authentication": "@body('Transform')?['authentication']",
                                        "body": "@body('Transform')?['requestBody']",
                                        "headers": "@body('Transform')?['headers']",
                                        "method": "@body('Transform')?['httpMethod']",
                                        "queries": "@body('Transform')?['queries']",
                                        "retryPolicy": {
                                            "type": "none"
                                        },
                                        "uri": "@body('Transform')?['fullUrl']"
                                    },
                                    "runAfter": {
                                        "Transform": [
                                            "Succeeded"
                                        ]
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                          "properties": [
                                            "inputs",
                                            "outputs"
                                          ]
                                        }
                                      },
                                    "type": "Http"
                                },
                                "GetSecret": {
                                    "inputs": {
                                        "parameters": {
                                            "secretName": "@body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]?['KeyvaultEntry']"
                                        },
                                        "serviceProviderConfiguration": {
                                            "connectionName": "keyVault",
                                            "operationId": "getSecret",
                                            "serviceProviderId": "/serviceProviders/keyVault"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                          "properties": [
                                            "outputs"
                                          ]
                                        }
                                      },
                                    "type": "ServiceProvider"
                                },
                                "ResponseData": {
                                    "inputs": {
                                        "code": "var responseStr = JSON.parse(workflowContext.actions.SPRoutingTokenConfig.outputs.body.ResultSets[0][0].ResponseStructure);\r\nvar getNewTokenResponse = workflowContext.actions.GetNewToken;\r\nvar response = {};\r\n\r\nresponse.token = new Function(\"getNewTokenResponse\", responseStr.token)(getNewTokenResponse);\r\nresponse.tokenExpiry = new Function(\"getNewTokenResponse\", responseStr.tokenExpiry)(getNewTokenResponse);\r\n\r\nreturn response;"
                                    },
                                    "runAfter": {
                                        "GetNewToken": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                          "properties": [
                                            "inputs"
                                          ]
                                        }
                                      },
                                    "type": "JavaScriptCode"
                                },
                                "Transform": {
                                    "inputs": {
                                        "content": {
                                            "environment": "{{environment}}",
                                            "message": "@body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]",
                                            "secret": "@{body('GetSecret')?['value']}",
                                            "specialSecret": "@{body('GetSpecialSecret')?['value']}"
                                        },
                                        "map": {
                                            "name": "@body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]?['MapName']",
                                            "source": "LogicApp"
                                        }
                                    },
                                    "kind": "JsonToJson",
                                    "runAfter": {
                                        "CheckForSpecialSecret": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                          "properties": [
                                            "inputs",
                                            "outputs"
                                          ]
                                        }
                                      },
                                    "type": "Liquid"
                                },
                                "UpdateToken": {
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://vault.azure.net",
                                            "authority": "",
                                            "clientId": "@{parameters('oAuth')?['clientId']}",
                                            "secret": "@{parameters('callerSecret')}",
                                            "tenant": "kpnbv.onmicrosoft.com",
                                            "type": "ActiveDirectoryOAuth"
                                        },
                                        "body": {
                                            "attributes": {
                                                "exp": "@div(sub(ticks(addSeconds(utcNow(),int(outputs('ResponseData')?['tokenExpiry']))),ticks('1970-01-01T00:00:00Z')),10000000)"
                                            },
                                            "value": "@outputs('ResponseData')?['token']"
                                        },
                                        "method": "PUT",
                                        "uri": "@concat(parameters('keyvaultUri'),'/secrets/',body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]?['KeyvaultTokenEntry'],'?api-version=7.4')"
                                    },
                                    "runAfter": {
                                        "ResponseData": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                          "properties": [
                                            "inputs",
                                            "outputs"
                                          ]
                                        }
                                      },
                                    "type": "Http"
                                }
                            }
                        },
                        "expression": {
                            "and": [
                                {
                                    "greater": [
                                        "@body('GetToken')?['validityEndTime']",
                                        "@addMinutes(utcNow(),2)"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "GetToken": [
                                "Succeeded"
                            ]
                        },
                        "type": "If"
                    },
                    "EndRun": {
                        "inputs": {
                            "runStatus": "Succeeded"
                        },
                        "runAfter": {
                            "Response": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Terminate"
                    },
                    "GetToken": {
                        "inputs": {
                            "parameters": {
                                "secretName": "@body('SPRoutingTokenConfig')?['ResultSets']?[0]?[0]?['KeyvaultTokenEntry']"
                            },
                            "serviceProviderConfiguration": {
                                "connectionName": "keyVault",
                                "operationId": "getSecret",
                                "serviceProviderId": "/serviceProviders/keyVault"
                            }
                        },
                        "runAfter": {
                            "SPRoutingTokenConfig": [
                                "Succeeded"
                            ]
                        },
                        "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "outputs"
                              ]
                            }
                          },
                        "type": "ServiceProvider"
                    },
                    "Response": {
                        "inputs": {
                            "body": {
                                "token": "@coalesce(outputs('ResponseData')?['token'],body('GetToken')?['value'])"
                            },
                            "headers": {
                                "AppRunlink": "@{concat('https://portal.azure.com/#view/Microsoft_Azure_EMA/DesignerEditor.ReactView/id/%2Fsubscriptions%2F', parameters('subscriptionId'),'%2FresourceGroups%2F{{resourceGroup}}%2Fproviders%2FMicrosoft.Web%2Fsites%2F{{logicappName}}%2Fworkflows%2F',workflow()?['name'],'/location/West%20Europe/isReadOnly/true/isMonitoringView/true/runId/',workflow()?['run']?['name'])}"
                            },
                            "statusCode": 200
                        },
                        "kind": "Http",
                        "runAfter": {
                            "CheckTokenStillValid": [
                                "SUCCEEDED"
                            ]
                        },
                        "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          },
                        "type": "Response"
                    },
                    "SPRoutingTokenConfig": {
                        "inputs": {
                            "parameters": {
                                "storedProcedureName": "kai.p_GEN_GetRoutingTokenConfig",
                                "storedProcedureParameters": {
                                    "Destination": "@{triggerBody()?['Destination']}"
                                }
                            },
                            "serviceProviderConfiguration": {
                                "connectionName": "sql-kpnb2b",
                                "operationId": "executeStoredProcedure",
                                "serviceProviderId": "/serviceProviders/sql"
                            }
                        },
                        "trackedProperties": {
                            "action_type": "@triggerBody()?['action_type']",
                            "destination": "@triggerBody()?['destination']",
                            "extra_info": "",
                            "logicApp": "{{logicappName}}",
                            "process_type": "@triggerBody()?['process_type']",
                            "reference_number": "@triggerBody()?['reference_number']",
                            "runLink": "@{concat('https://portal.azure.com/#view/Microsoft_Azure_EMA/DesignerEditor.ReactView/id/%2Fsubscriptions%2F', parameters('subscriptionId'),'%2FresourceGroups%2F{{resourceGroup}}%2Fproviders%2FMicrosoft.Web%2Fsites%2F{{logicappName}}%2Fworkflows%2F',workflow()?['name'],'/location/West%20Europe/isReadOnly/true/isMonitoringView/true/runId/',workflow()?['run']?['name'])}",
                            "source": "@action()?['outputs']?['body']?['ResultSets']?[0]?[0]?['source']",
                            "ticket_number": "@triggerBody()?['ticket_number']"
                        },
                        "type": "ServiceProvider"
                    }
                },
                "runAfter": {},
                "type": "Scope"
            },
            "ScopeFilterFailedAction": {
                "inputs": {
                    "from": "@createArray(actions('SPRoutingTokenConfig'),actions('GetToken'),actions('GetSecret'),actions('GetSpecialSecret'),actions('Transform'),actions('GetNewToken'),actions('ResponseData'),actions('UpdateToken'),actions('Response'),actions('EndRun'))",
                    "where": "@equals(item()['status'],'Failed')"
                },
                "runAfter": {
                    "Scope": [
                        "FAILED",
                        "TIMEDOUT"
                    ]
                },
                "type": "Query"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "kpnsn-gen-gettoken-wf": {
                "inputs": {},
                "kind": "Http",
                "type": "Request"
            }
        }
    },
    "kind": "Stateful"
}